from __future__ import absolute_import
from __future__ import division
from __future__ import print_function


import tensorflow as tf

from datasets import dataset_factory
from deployment import model_deploy
from nets import nets_factory
from preprocessing import preprocessing_factory


slim = tf.contrib.slim

################################################################################
train_log_dir = "./tmp/cve_diseases-models/test"
dataset_dir = "./tmp"
batch_size = 8
model1 = "inception_resnet_v2"
model2 = "alexnet_v2"
################################################################################
if not tf.gfile.Exists(train_log_dir):
  tf.gfile.MakeDirs(train_log_dir)

with tf.Graph().as_default():

################################################################################
#               GET DATASET
################################################################################
    dataset = dataset_factory.get_dataset(
        "cve_diseases", "train", dataset_dir)


    provider = slim.dataset_data_provider.DatasetDataProvider(
          dataset,
          num_readers=4,
          common_queue_capacity=20 * batch_size,
          common_queue_min=10 * batch_size)


    images, labels = provider.get(['image', 'label'])


################################################################################
#               DEFINE MODEL
################################################################################
    # cnn1 = nets_factory.get_network_fn(
    #     model1,
    #     num_classes=11,
    #     weight_decay=0.00004,
    #     is_training=True)
    #
    # cnn2 = nets_factory.get_network_fn(
    #     model2,
    #     num_classes=11,
    #     weight_decay=0.00004,
    #     is_training=True)
    #
    # slim.losses.softmax_cross_entropy(cnn1, labels)
    # slim.losses.softmax_cross_entropy(cnn2, labels)
    #
    # total_loss = slim.losses.get_total_loss()
    # tf.summary.scalar('losses/total_loss', total_loss)
    #
    #
    # optimizer = tf.train.GradientDescentOptimizer(learning_rate=.001)
    #
    # train_tensor = slim.learning.create_train_op(total_loss, optimizer)
    #
    # slim.learning.train(train_tensor, train_log_dir)

################################################################################
#
################################################################################


################################################################################
#
################################################################################
