from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf
from datasets import cve_diseases
from nets import inception_resnet_v2
from nets import alexnet
from nets import nets_factory
from preprocessing import inception_preprocessing

slim = tf.contrib.slim

################################################################################
#                               CONFIGURE                                      #
################################################################################
# CNNs to use
model1 = "inception_resnet_v2"
model2 = "alexnet_v2"

dataset_name = "cve_diseases"
dataset_split_name = "train"
dataset_dir = "tmp/"
batch_size = 4
max_number_of_steps = 20
train_dir = "./tmp/cve_diseases-models/test-model/"
#Optimization flags


################################################################################

slim = tf.contrib.slim


def load_batch(dataset, batch_size=32, height=299, width=299, is_training=False):
    data_provider = slim.dataset_data_provider.DatasetDataProvider(dataset)

    image, label = data_provider.get(['image', 'label'])

    image = inception_preprocessing.preprocess_image(
        image,
        height,
        width,
        is_training)

    images, labels = tf.train.batch(
        [image, label],
        batch_size=batch_size,
        allow_smaller_final_batch=True)

    return images, labels




def main(args):
    # load the dataset
    dataset = cve_diseases.get_split('train', dataset_dir)

    # load batch of dataset
    images, labels = load_batch(
        dataset,
        batch_size,
        is_training=True)

    # run the image through the model
    cnn1 = nets_factory.get_network_fn(
        model1,
        num_classes=None,
        weight_decay=0.00004,
        is_training=True)
    cnn2 = nets_factory.get_network_fn(
        model2,
        num_classes=None,
        weight_decay=0.00004,
        is_training=True)
    net1, end_points1 = cnn1(images)
    net2, end_points2 = cnn2(images)
    net = tf.concat(net1, net2)
    net = slim.flatten(net)
    net = slim.dropout(net, 0.8, is_training=True, scope='Dropout')
    logits = slim.fully_connected(net, 11, activation_fn=None, scope='Logits')




    # get the cross-entropy loss
    one_hot_labels = slim.one_hot_encoding(
        labels,
        dataset.num_classes)
    slim.losses.softmax_cross_entropy(
        logits,
        one_hot_labels)
    total_loss = slim.losses.get_total_loss()
    tf.summary.scalar('loss', total_loss)

    # use RMSProp to optimize
    optimizer = tf.train.RMSPropOptimizer(0.001, 0.9)

    # create train op
    train_op = slim.learning.create_train_op(
        total_loss,
        optimizer,
        summarize_gradients=True)

    # run training
    slim.learning.train(
        train_op,
        logdir=train_dir,
        number_of_steps=max_number_of_steps,
        log_every_n_steps=10,
        save_summaries_secs=20)


if __name__ == '__main__':
    tf.app.run()
