from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from textwrap import wrap
import re
import itertools
import tfplot
import matplotlib
import numpy as np
from sklearn.metrics import confusion_matrix
import os


import math
import tensorflow as tf

from datasets import dataset_factory
from nets import nets_factory
from preprocessing import inception_preprocessing
from datasets import cve_diseases
from nets import inception_resnet_v2
from nets import inception_v3


slim = tf.contrib.slim

tf.app.flags.DEFINE_integer(
    'batch_size', 204, 'The number of samples in each batch.')

tf.app.flags.DEFINE_integer(
    'max_num_batches', None,
    'Max number of batches to evaluate by default use all.')

tf.app.flags.DEFINE_string(
    'master', '', 'The address of the TensorFlow master to use.')

tf.app.flags.DEFINE_string(
    'checkpoint_path', '/tmp/tfmodel/',
    'The directory where the model was written to or an absolute path to a '
    'checkpoint file.')

tf.app.flags.DEFINE_string(
    'eval_dir', '/tmp/tfmodel/', 'Directory where the results are saved to.')

tf.app.flags.DEFINE_integer(
    'num_preprocessing_threads', 4,
    'The number of threads used to create the batches.')

tf.app.flags.DEFINE_string(
    'dataset_name', 'cve-diseases', 'The name of the dataset to load.')

tf.app.flags.DEFINE_string(
    'dataset_split_name', 'validation', 'The name of the train/test split.')

tf.app.flags.DEFINE_string(
    'dataset_dir', None, 'The directory where the dataset files are stored.')

tf.app.flags.DEFINE_integer(
    'labels_offset', 0,
    'An offset for the labels in the dataset. This flag is primarily used to '
    'evaluate the VGG and ResNet architectures which do not use a background '
    'class for the ImageNet dataset.')

tf.app.flags.DEFINE_string(
    'model_name', 'inception_v3', 'The name of the architecture to evaluate.')

tf.app.flags.DEFINE_string(
    'preprocessing_name', None, 'The name of the preprocessing to use. If left '
    'as `None`, then the model_name flag is used.')

tf.app.flags.DEFINE_float(
    'moving_average_decay', None,
    'The decay to use for the moving average.'
    'If left as None, then moving averages are not used.')

tf.app.flags.DEFINE_integer(
    'eval_image_size', None, 'Eval image size')

FLAGS = tf.app.flags.FLAGS


model1 = "inception_resnet_v2"
model2 = "inception_v3"
cnn1 = nets_factory.get_network_fn(
    model1,
    num_classes=None,
    weight_decay=0.00004,
    is_training=False)
cnn2 = nets_factory.get_network_fn(
    model2,
    num_classes=None,
    weight_decay=0.00004,
    is_training=False)

def jonet(images):


  net, end_points1 = cnn1(images)
  net = slim.flatten(net)
  net = slim.dropout(net, 0.8, is_training=True)
  net = slim.fully_connected(net, 11, activation_fn=None)
  return net


# In[4]:


def load_batch(dataset, batch_size=8, height=299, width=299, is_training=False):
  data_provider = slim.dataset_data_provider.DatasetDataProvider(dataset)

  image, label = data_provider.get(['image', 'label'])

  image = inception_preprocessing.preprocess_image(
    image,
    height,
    width,
    is_training)

  images, labels = tf.train.batch(
    [image, label],
    batch_size=batch_size,
    allow_smaller_final_batch=True)

  return images, labels


def eval_confusion_matrix(labels, predictions):
    with tf.variable_scope("eval_confusion_matrix"):
        con_matrix = tf.confusion_matrix(labels=labels, predictions=predictions, num_classes=11)

        con_matrix_sum = tf.Variable(tf.zeros(shape=(11,11), dtype=tf.int32),
                                            trainable=False,
                                            name="confusion_matrix_result",
                                            collections=[tf.GraphKeys.LOCAL_VARIABLES])


        update_op = tf.assign_add(con_matrix_sum, con_matrix)

        return tf.convert_to_tensor(con_matrix_sum), update_op



def main(_):
  if not FLAGS.dataset_dir:
    raise ValueError('You must supply the dataset directory with --dataset_dir')

  tf.logging.set_verbosity(tf.logging.INFO)
  with tf.Graph().as_default():
    tf_global_step = tf.train.get_or_create_global_step()

    ######################
    # Select the dataset #
    ######################
    dataset = cve_diseases.get_split('validation', FLAGS.dataset_dir)


    images, labels = load_batch(
	dataset,
        FLAGS.batch_size,
        is_training=False)

    
    ####################
    # Define the model #
    ####################
    predictions = jonet(images)
    predictions = tf.nn.softmax(predictions)
    predictions = tf.argmax(predictions, 1)
    #labels = tf.squeeze(labels)

    if FLAGS.moving_average_decay:
      variable_averages = tf.train.ExponentialMovingAverage(
          FLAGS.moving_average_decay, tf_global_step)
      variables_to_restore = variable_averages.variables_to_restore(
          slim.get_model_variables())
      variables_to_restore[tf_global_step.op.name] = tf_global_step
    else:
      variables_to_restore = slim.get_variables_to_restore()

    # Define the metrics:
    names_to_values, names_to_updates = slim.metrics.aggregate_metric_map({
        'Accuracy': tf.metrics.accuracy(labels, predictions),

        'Precision': tf.metrics.precision(
            labels,
            predictions,
            weights=None,
            metrics_collections=None,
            updates_collections=None,
            name=None),
        'Recall': tf.metrics.recall(
            labels,
            predictions,
            weights=None,
            metrics_collections=None,
            updates_collections=None,
            name=None),
        'True_Negatives': tf.metrics.true_negatives(
            labels,
            predictions,
            weights=None,
            metrics_collections=None,
            updates_collections=None,
            name=None
        ),
        'True_Positives': tf.metrics.true_positives(
            labels,
            predictions,
            weights=None,
            metrics_collections=None,
            updates_collections=None,
            name=None
        ),
        'False_Negatives': tf.metrics.false_negatives(
            labels,
            predictions,
            weights=None,
            metrics_collections=None,
            updates_collections=None,
            name=None
        ),
        'False_Positives': tf.metrics.false_positives(
            labels,
            predictions,
            weights=None,
            metrics_collections=None,
            updates_collections=None,
            name=None
         ),
        #  'AUC': tf.metrics.auc(
        #      labels,
        #      predictions,
        #      weights=None,
        #      num_thresholds=200,
        #      metrics_collections=None,
        #      updates_collections=None,
        #      curve='ROC',
        #      name=None,
        #      summation_method='trapezoidal'
        # ) 
        'Confusion_Matrix': eval_confusion_matrix(
            labels,
            predictions),

    })
    # eval_metric_ops = {
    # "accuracy": tf.metrics.accuracy(labels, predictions),
    # "conv_matrix": eval_confusion_matrix(
    #     labels, predictions)
    # }
    #metrics_to_values, metrics_to_updates = slim.metrics.aggregate_metric_map({
    #    'mse': tf.metrics.mean_squared_error(labels, predictions),
    #    'accuracy': tf.contrib.metrics.streaming_accuracy(predictions, labels),
    #    #'auc': tf.contrib.metrics.confusion_matrix(labels, predictions)
    #})


    # Print the summaries to screen.
    for name, value in names_to_values.items():
      summary_name = 'eval/%s' % name
      op = tf.summary.scalar(summary_name, value, collections=[])
      op = tf.Print(op, [value], summary_name)
      tf.add_to_collection(tf.GraphKeys.SUMMARIES, op)

    # TODO(sguada) use num_epochs=1
    if FLAGS.max_num_batches:
      num_batches = FLAGS.max_num_batches
    else:
      # This ensures that we make a single pass over all of the data.
      num_batches = math.ceil(dataset.num_samples / float(FLAGS.batch_size))

    if tf.gfile.IsDirectory(FLAGS.checkpoint_path):
      checkpoint_path = tf.train.latest_checkpoint(FLAGS.checkpoint_path)
    else:
      checkpoint_path = FLAGS.checkpoint_path

    tf.logging.info('Evaluating %s' % checkpoint_path)

    slim.evaluation.evaluate_once(
        master=FLAGS.master,
        checkpoint_path=checkpoint_path,
        logdir=FLAGS.eval_dir,
        num_evals=num_batches,
        eval_op=list(names_to_updates.values()),
        #eval_op=list(metrics_to_updates.values()),
        variables_to_restore=variables_to_restore)


if __name__ == '__main__':
  tf.app.run()
